#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

const debug = require('debug')('api:server');
const http = require('http');
const {
  app, sequelize, models, databaseConfig
} = require('../app');

const testData = require('../testdata'); // Test data for seeding database

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Sync database.
 * Listen on provided port, on all network interfaces.
 */

sequelize.sync(databaseConfig).then(async () => { // TODO: Use sequelize.migration() instead
  if (databaseConfig.force) {
    await seedDatabase(testData);
  }

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Seed database.
 */
const seedDatabase = async (data) => {
  await createGroups(data.groups);
  await createUsers(data.users);
  await createBuoys(data.buoys);
  await createData(data.data);
};

// TODO: Figure out a proper way to chain these so they execute synchronously
// Inserting data must happen in the correct order. A model's dependencies must be inserted first.

const createGroups = (groups) => new Promise((resolve) => {
  models.Group.bulkCreate(groups).then(() => {
    resolve();
  })
    .catch((err) => {
      console.error(err);
    });
});

const createUsers = (users) => new Promise((resolve) => {
  models.User.bulkCreate(users).then(() => {
    resolve();
  })
    .catch((err) => {
      console.error(err);
    });
});

const createBuoys = (buoys) => new Promise((resolve) => {
  models.Buoy.bulkCreate(buoys).then(() => {
    resolve();
  })
    .catch((err) => {
      console.error(err);
    });
});

const createData = (data) => new Promise((resolve) => {
  models.Data.bulkCreate(data).then(() => {
    resolve();
  })
    .catch((err) => {
      console.error(err);
    });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portNumber = parseInt(val, 10);

  if (isNaN(portNumber)) {
    // named pipe
    return val;
  }

  if (portNumber >= 0) {
    // port number
    return portNumber;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
